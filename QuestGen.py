import streamlit as st
import json
import re
from openai import OpenAI

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∫–≤–µ—Å—Ç–∞ ---

def create_llm_prompt(genre: str, hero: str, goal: str) -> str:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è, —Å–∞–º–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.
    """
    prompt = f"""
–¢—ã ‚Äî —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –≥–ª—É–±–æ–∫–∏–µ –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è RPG –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
- –ñ–∞–Ω—Ä: '{genre}'
- –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: '{hero}'
- –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: '{goal}'

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ–¥–∏–Ω—ã–º, —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JSON-–º–∞—Å—Å–∏–≤–æ–º –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–º.

–ö–õ–Æ–ß–ï–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö JSON-–°–¢–†–£–ö–¢–£–†–ï:
1.  **–î–ª–∏–Ω–∞ –∏ –≥–ª—É–±–∏–Ω–∞:** –ö–≤–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–∏–º –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º. **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8**. –í–∞–∂–Ω–æ: –≤—Å–µ –ø—É—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –ª—é–±–æ–π –∏–∑ –∫–æ–Ω—Ü–æ–≤–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–ª—É–±–æ–∫–∏–º–∏. **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª—é–±–æ–π —Å—é–∂–µ—Ç–Ω–æ–π –≤–µ—Ç–∫–∏ ‚Äî 5 —Å—Ü–µ–Ω.** –ù–µ —Å–æ–∑–¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—É–ø–∏–∫–æ–≤—ã—Ö –≤–µ—Ç–æ–∫.
2.  **–§–æ—Ä–º–∞—Ç:** –í–µ—Å—å –∫–≤–µ—Å—Ç ‚Äî —ç—Ç–æ –æ–¥–∏–Ω JSON-–º–∞—Å—Å–∏–≤ `[]`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `[` –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è `]`.
3.  **–õ–æ–∫–∞—Ü–∏—è:** –í –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ `"location"` —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–æ–Ω–æ–≤–∞—è —É–ª–∏—Ü–∞", "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã").
4.  **–í—ã–±–æ—Ä:** –í –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ `"choices"` —Å –º–∞—Å—Å–∏–≤–æ–º **–æ—Ç 2 –¥–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞**. –°—Ç–∞—Ä–∞–π—Å—è –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–≤–µ—Å—Ç –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º.

–ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ –°–¶–ï–ù–´:
{{
    "scene_id": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
    "location": "–æ–ø–∏—Å–∞–Ω–∏–µ_–º–µ—Å—Ç–∞_–¥–µ–π—Å—Ç–≤–∏—è",
    "text": "–æ—Å–Ω–æ–≤–Ω–æ–π_—Ç–µ–∫—Å—Ç_—Å—Ü–µ–Ω—ã",
    "choices": [
        {{ "text": "—Ç–µ–∫—Å—Ç_–≤—ã–±–æ—Ä–∞_1", "next_scene": "id_—Å—Ü–µ–Ω—ã_1" }},
        {{ "text": "—Ç–µ–∫—Å—Ç_–≤—ã–±–æ—Ä–∞_2", "next_scene": "id_—Å—Ü–µ–Ω—ã_2" }},
        {{ "text": "—Ç–µ–∫—Å—Ç_–≤—ã–±–æ—Ä–∞_3", "next_scene": "id_—Å—Ü–µ–Ω—ã_3" }}
    ]
}}

–ß–ï–ì–û –°–õ–ï–î–£–ï–¢ –ò–ó–ë–ï–ì–ê–¢–¨ (–í–ê–ñ–ù–û!):
- **–ù–∏–∫–∞–∫–æ–≥–æ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:** –ù–µ –ø–∏—à–∏ "–í–æ—Ç –≤–∞—à JSON:" –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –≤–Ω–µ —Å–∞–º–æ–≥–æ JSON.
- **–¢–æ–ª—å–∫–æ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏:** –í—Å–µ –∫–ª—é—á–∏ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö (`"`). –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (`'`) –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
- **–ù–∏–∫–∞–∫–∏—Ö –≤–∏—Å—è—á–∏—Ö –∑–∞–ø—è—Ç—ã—Ö:** –ù–µ —Å—Ç–∞–≤—å –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–µ.

–ù–∞—á–∏–Ω–∞–π –∫–≤–µ—Å—Ç —Å–æ —Å—Ü–µ–Ω—ã —Å `"scene_id": "start"`.
"""
    return prompt

def generate_quest_with_caila(prompt: str) -> str:
    """
    Sends a request to your API endpoint and returns the generated quest.
    """
    try:
        api_key = st.session_state.get("api_key")
        if not api_key:
            return '{"error": "API –∫–ª—é—á –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."}'

        client = OpenAI(
            api_key=api_key,
            base_url="https://caila.io/api/adapters/openai"
        )

        completion = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="just-ai/gigachat/GigaChat-2-Max",
            temperature=0.75
        )

        content = completion.choices[0].message.content

        # Improved JSON extraction logic
        match = re.search(r'```json\n(.*?)\n```', content, re.DOTALL)
        if match:
            return match.group(1).strip()

        first_brace = content.find('{')
        first_bracket = content.find('[')
        start_index = -1

        if first_brace == -1 and first_bracket != -1:
            start_index = first_bracket
        elif first_bracket == -1 and first_brace != -1:
            start_index = first_brace
        elif first_brace != -1 and first_bracket != -1:
            start_index = min(first_brace, first_bracket)

        if start_index != -1:
            last_brace = content.rfind('}')
            last_bracket = content.rfind(']')
            end_index = max(last_brace, last_bracket)
            if end_index > start_index:
                return content[start_index : end_index + 1].strip()

        return content.strip()

    except Exception as e:
        return f'{{"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API", "details": "{str(e)}"}}'

# --- –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤", page_icon="üìú", layout="centered")
st.title("üìú –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤ –¥–ª—è RPG")
st.write("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–¥–µ–π.")

api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç caila.io", type="password", help="–í–∞—à –∫–ª—é—á –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∞–Ω—Å–∞.")
st.session_state["api_key"] = api_key

st.header("1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é")
genre = st.text_input("–ñ–∞–Ω—Ä", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ—ç–Ω—Ç–µ–∑–∏, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω—É–∞—Ä...")
hero = st.text_input("–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —ç–ª—å—Ñ–∏–π—Å–∫–∏–π —Å–ª–µ–¥–æ–ø—ã—Ç, —Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞...")
goal = st.text_input("–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –≤–∑–ª–æ–º–∞—Ç—å —Å–µ—Ä–≤–µ—Ä...")

st.header("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
if st.button("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç!"):
    if 'quest_data' in st.session_state:
        del st.session_state['quest_data']
    if 'current_scene_id' in st.session_state:
        del st.session_state['current_scene_id']

    if not all([genre, hero, goal, st.session_state.get("api_key")]):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")
    else:
        with st.spinner("–ú–∞–≥–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏... –ú–æ–¥–µ–ª—å –ø–∏—à–µ—Ç –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é..."):
            final_prompt = create_llm_prompt(genre, hero, goal)
            json_response = generate_quest_with_caila(final_prompt)

            try:
                quest_data = json.loads(json_response)

                if isinstance(quest_data, dict):
                    if "error" in quest_data:
                        st.error(f"**–û—à–∏–±–∫–∞ API:** {quest_data.get('details', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        st.stop()
                    else:
                        st.session_state['quest_data'] = list(quest_data.values())
                else:
                    st.session_state['quest_data'] = quest_data
                
                st.session_state['current_scene_id'] = 'start'
                st.success("–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

            except json.JSONDecodeError:
                st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                st.code(json_response, language="text")

# --- –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ ---

if 'quest_data' in st.session_state:
    st.header("3. –í–∞—à –≥–æ—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç")
    st.download_button(
       label="üì• –°–∫–∞—á–∞—Ç—å quest.json",
       data=json.dumps(st.session_state['quest_data'], indent=4, ensure_ascii=False).encode('utf-8'),
       file_name="quest.json",
       mime="application/json"
    )

    st.header("4. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞")
    
    quest_scenes = {scene["scene_id"]: scene for scene in st.session_state['quest_data']}
    current_scene_id = st.session_state.get('current_scene_id', 'start')

    if current_scene_id in quest_scenes:
        current_scene = quest_scenes[current_scene_id]

        st.info(f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {current_scene.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        with st.chat_message("user", avatar="üìú"):
            st.write(current_scene['text'])

        st.write("---")
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

        if current_scene.get('choices'):
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤
            cols = st.columns(len(current_scene['choices']))
            for i, choice in enumerate(current_scene['choices']):
                if cols[i].button(choice['text'], key=f"{current_scene_id}_{i}"):
                    st.session_state['current_scene_id'] = choice['next_scene']
                    st.rerun()
        else:
            st.success("üéâ –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤–æ–∫ –∫–≤–µ—Å—Ç–∞! üéâ")

    else:
        st.success("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ")
        if st.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state['current_scene_id'] = 'start'
            st.rerun()
